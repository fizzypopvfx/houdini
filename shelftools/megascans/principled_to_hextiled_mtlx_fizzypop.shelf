<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="principled_to_hextiled_mtlx_fizzypop" label="Principled to Hex MtlX (FIZZYPOP!)" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou
import voptoolutils


def convert_principled_to_materialx(principled_node: hou.Node):
    matnet = principled_node.parent()  # Get material network

    # Karma Material Builder
    new_mat_name = f"{principled_node.name()}_HexTiled_MtlX"
    subnet = voptoolutils._setupMtlXBuilderSubnet(
        destination_node=matnet,
        name=new_mat_name,
        mask=voptoolutils.KARMAMTLX_TAB_MASK,
        folder_label=new_mat_name,
    )

    # MaterialX Standard Surface
    mtlx_shader = subnet.node("mtlxstandard_surface")

    # Base Color
    color_tex_path = principled_node.parm("basecolor_texture")
    color_tex_node = create_hex_node(subnet, "base_color", color_tex_path.eval())
    mtlx_shader.setNamedInput("base_color", color_tex_node, "out")

    # Roughness
    rough_tex_path = principled_node.parm("rough_texture")
    rough_tex_node = create_hex_node(
        subnet, "specular_roughness", rough_tex_path.eval()
    )
    mtlx_shader.setNamedInput("specular_roughness", rough_tex_node, "out")

    # Normal Map
    normal_tex_node = create_hex_node(
        subnet, "normal_texture", principled_node.parm("baseNormal_texture").eval()
    )
    normal_tex_node.parm("signature").set("normals")
    mtlx_shader.setNamedInput("normal", normal_tex_node, "out")

    # Displacement
    mtlx_displacement = subnet.node("mtlxdisplacement")
    mtlx_displacement.parm("scale").set(0.1)
    sep_4c = subnet.createNode("mtlxseparate4c")
    remap = subnet.createNode("mtlxremap")
    remap.parm("outlow").set(-0.5)  # Remap to -0.5 and 0.5 for Megascans
    remap.parm("outhigh").set(0.5)
    disp_tex_node = create_hex_node(
        subnet, "displacement_texture", principled_node.parm("dispTex_texture").eval()
    )

    sep_4c.setNamedInput("in", disp_tex_node, "out")
    remap.setNamedInput("in", sep_4c, "outr")
    mtlx_displacement.setNamedInput("displacement", remap, "out")

    # Setup relative references
    set_relative_references(color_tex_node, normal_tex_node)
    set_relative_references(color_tex_node, rough_tex_node)
    set_relative_references(color_tex_node, disp_tex_node)

    # Tweaks
    color_tex_node.parm("rand_rot").set(0.0)

    # Layout
    subnet.layoutChildren()
    subnet.moveToGoodPosition()


def create_hex_node(parent: hou.Node, name: str, imagePath: str) -> hou.Node:
    tex_node = parent.createNode("kma_hextiled_triplanar", f"tex_{name}")
    tex_node.parm("file").set(imagePath)
    return tex_node


def set_relative_references(fromNode: hou.Node, toNode: hou.Node):
    params = {
        "size",
        "rand_scale",
        "rand_rot",
        "seed",
        "contrast",
        "contrast_falloff",
        "weightexp",
        "blend",
    }

    for paramName in params:
        toNode.parm(paramName).set(fromNode.parm(paramName))


# Get the selected Principled Shader node and convert it
selected_node = hou.selectedNodes()
if selected_node and selected_node[0].type().name() == "principledshader::2.0":
    convert_principled_to_materialx(selected_node[0])
else:
    hou.ui.displayMessage(
        "Please select a Principled Shader node generated by the Quixel Megascans Plugin."
    )
]]></script>
  </tool>
</shelfDocument>
